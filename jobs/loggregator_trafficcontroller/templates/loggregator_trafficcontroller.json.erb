<%
    # try and set these properties from a BOSH 2.0 spec object
    job_name = spec.job.name || name
    instance_id = spec.id || spec.index.to_s
    deployment = spec.deployment

    doppler_addrs = []
    etcd_machines = []
    etcd_tls_client_config = {}
    etcd_max_concurrent_requests = 0
    etcd_require_tls = false

    if_link("doppler") do |ds|
        doppler_addrs = ds.instances.map{|i| "#{i.address}:#{ds.p('doppler.grpc_port')}"}
    end.else do
        etcd_machines = p("loggregator.etcd.machines").map{|addr| "#{p('loggregator.etcd.require_ssl') ? 'https' : 'http'}://#{addr}:4001"}
            etcd_tls_client_config = {
            "KeyFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-client.key",
            "CertFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-client.crt",
            "CAFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-ca.crt"
        }
        etcd_max_concurrent_requests = p("loggregator.etcd.maxconcurrentrequests")
        etcd_require_tls = p("loggregator.etcd.require_ssl")
    end

    # Handle renamed properties
    uaa_client = p("loggregator.uaa.client")
    oldUaaClient = p("loggregator.uaa_client_id")
    unless oldUaaClient.empty?
        uaa_client = oldUaaClient
    end

    grpc_config = {
        "Port" => p("doppler.grpc_port"),
        "KeyFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/trafficcontroller.key",
        "CertFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/trafficcontroller.crt",
        "CAFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/loggregator_ca.crt"
    }

    metronConfig = {
        "UDPAddress" => p('metron_endpoint.host').to_s + ":" + p('metron_endpoint.dropsonde_port').to_s,
        "GRPCAddress" => p('metron_endpoint.host').to_s + ":" + p('metron_endpoint.grpc_port').to_s
    }

    scheme = p("login.protocol")
    domain = p("system_domain")
    uaa_host = p("uaa.url", "#{scheme}://uaa.#{domain}")

    args = {
        "JobName" => job_name,
        "Index" => instance_id,
        "DeploymentName" => deployment,
        "IP" => spec.ip,
        "EtcdUrls" => etcd_machines,
        "EtcdMaxConcurrentRequests" => etcd_max_concurrent_requests,
        "EtcdRequireTLS" => etcd_require_tls,
        "DopplerAddrs" => doppler_addrs,
        "DopplerPort" => p("doppler.outgoing_port"),
        "OutgoingDropsondePort" => p("loggregator.outgoing_dropsonde_port"),
        "GRPC" => grpc_config,
        "SkipCertVerify" => p("ssl.skip_cert_verify"),
        "ApiHost" => p("cc.srv_api_uri"),
        "SystemDomain" => p("system_domain"),
        "PPROFPort" => p("traffic_controller.pprof_port"),
        "UaaHost" => uaa_host,
        "UaaClient" => uaa_client,
        "UaaClientSecret" => p("loggregator.uaa.client_secret"),
        "MetronConfig" => metronConfig,
        "MetricEmitterInterval" => p('metric_emitter.interval'),
    }

    if etcd_require_tls
        args["EtcdTLSClientConfig"] = etcd_tls_client_config
    end
    if p("traffic_controller.security_event_logging.enabled")
        args["SecurityEventLog"] = "/var/vcap/sys/log/loggregator_trafficcontroller/loggregator_trafficcontroller_security_events.log"
    end
%>
<%= JSON.pretty_generate(args) %>
