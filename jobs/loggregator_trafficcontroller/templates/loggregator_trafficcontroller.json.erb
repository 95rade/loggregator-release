<%
    # try and set these properties from a BOSH 2.0 spec object
    job_name = spec.job.name || name
    instance_id = spec.id || spec.index.to_s

    etcd_machines = p("loggregator.etcd.machines").map{|addr| "#{p('loggregator.etcd.require_ssl') ? 'https' : 'http'}://#{addr}:4001"}
    etcd_tls_client_config = {
        "KeyFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-client.key",
        "CertFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-client.crt",
        "CAFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-ca.crt"
    }
    etcd_max_concurrent_requests = p("loggregator.etcd.maxconcurrentrequests")
    etcd_require_tls = p("loggregator.etcd.require_ssl")

    # Handle renamed properties
    uaa_client = p("loggregator.uaa.client")
    old_uaa_client = p("loggregator.uaa_client_id")
    unless old_uaa_client.empty?
        uaa_client = old_uaa_client
    end

    uaa_secret = p("loggregator.uaa.client_secret")
    if uaa_secret.empty?
        uaa_secret = p("uaa.clients.doppler.secret")
    end

    grpc_config = {
        "Port" => p("doppler.grpc_port"),
        "KeyFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/trafficcontroller.key",
        "CertFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/trafficcontroller.crt",
        "CAFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/loggregator_ca.crt"
    }

    scheme = p("login.protocol")
    domain = p("system_domain")
    uaa_host = p("uaa.url", "#{scheme}://uaa.#{domain}")

    args = {
        "JobName" => job_name,
        "Index" => instance_id,
        "IP" => spec.ip,
        "EtcdUrls" => etcd_machines,
        "EtcdMaxConcurrentRequests" => etcd_max_concurrent_requests,
        "EtcdRequireTLS" => etcd_require_tls,
        "DopplerPort" => p("doppler.outgoing_port"),
        "OutgoingDropsondePort" => p("loggregator.outgoing_dropsonde_port"),
        "GRPC" => grpc_config,
        "SkipCertVerify" => p("ssl.skip_cert_verify"),
        "ApiHost" => p("cc.srv_api_uri"),
        "CipherSuites" => p("router.cipher_suites").split(":"),
        "SystemDomain" => p("system_domain"),
        "MetronPort" => p("metron_endpoint.dropsonde_port"),
        "PPROFPort" => p("traffic_controller.pprof_port"),
        "UaaHost" => uaa_host,
        "UaaClient" => uaa_client,
        "UaaClientSecret" => uaa_secret,
    }

    if etcd_require_tls
        args["EtcdTLSClientConfig"] = etcd_tls_client_config
    end

    if_p("syslog_daemon_config") do
        a[:Syslog] = "vcap.trafficcontroller"
    end

    if p("traffic_controller.security_event_logging.enabled")
        args["SecurityEventLog"] = "/var/vcap/sys/log/loggregator_trafficcontroller/loggregator_trafficcontroller_security_events.log"
    end
%>
<%= JSON.pretty_generate(args) %>
